This is a roadmap to the code layout in snit.tcl.

Package Definition
* package provide
* ::snit:: namespace definition; exports Snit commands.

Major Variable Definitions (this includes a whole lot of code)
* ::snit:: variable definitions:
    * reservedArgs
    * prettyStackTrace          Not used currently
    * defs                      Array of definition templates.
                                Content is parsed as though it were part
                                of the user's class definition.
* ::snit::defs(common)          Definitions shared by all Snit classes.
    * options array
    * common method and typemethod delegations

* ::snit::defs(type)            Definitions for snit::types.
    * method and typemethod delegations

* ::snit::defs(widget)          Definitions for snit::widget(adaptor)s.
    * typemethod delegations

* ::snit::typeTemplate          Template code shared by all Snit types.
                                As the type definition is parsed, it
                                produced text that gets inserted into
                                this template; then the template is
                                evaluated as though it were sourced
                                from a normal .tcl file.
* Type namespace definition
    * User's typevariable definitions
    * proc Snit_cleanup         Destroys objects, calls destructor.
    * proc Snit_constructor     The default constructor
    * proc Snit_instanceVars    Initializes instance variables
    * proc Snit_destructor      The default destructor (empty)
    * alias typevariable
    * alias variable
    * alias mytypevar
    * alias typevarname         Deprecated
    * alias myvar
    * alias varname             Deprecated
    * alias myproc
    * alias codename            Deprecated
    * alias mymethod
    * alias mytypemethod
    * alias from
    * proc installhull
    * proc install
    * typevariable Snit_info
    * typevariable Snit_typemethods
    * typevariable Snit_methodInfo
    * typevariable Snit_optiondefaults
    * typevariable Snit_optiondbspec
    * typevariable Snit_delegatedoptions
    * typevariable Snit_compoptions
    * proc %TYPE%
    * proc Snit_install                     Badly named
    * proc Snit_removetrace                 Badly named
    * proc Snit_tracer                      Badly named
    * %COMPILEDDEFS%
    * proc Snit_typeconstructor defined
    * proc Snit_typeconstructor called

* Snit compilation variables
    * compiler			The name of the slave interpreter used
                                to "compile" type definitions
    * compile                   Array, accumulates results of
                                "compiling" type definitions
    * reservedwords             List of names that can't be used as
                                macros.  Basically, any command
                                defined before the first macro.

Compilation Commands
* proc ::snit::Comp.Init
* proc ::snit::Comp.Compile
* proc ::snit::Comp.Define
* proc ::snit::Comp.statement.widgetclass
* proc ::snit::Comp.statement.hulltype
* proc ::snit::Comp.statement.constructor
* proc ::snit::Comp.statement.destructor
* proc ::snit::Comp.statement.option
* proc ::snit::Comp.statement.oncget
* proc ::snit::Comp.statement.onconfigure
* proc ::snit::Comp.statement.method
* proc ::snit::Comp.statement.typemethod
* proc ::snit::Comp.statement.typeconstructor
* proc ::snit::Comp.statement.proc
* proc ::snit::Comp.statement.typevariable
* proc ::snit::Comp.statement.variable
* proc ::snit::Comp.statement.component
* proc ::snit::Comp.DefineComponent
* proc ::snit::Comp.statement.delegate
* proc ::snit::Comp.DelegatedTypemethod
* proc ::snit::Comp.DelegatedMethod
* proc ::snit::Comp.DelegatedOption
* proc ::snit::Comp.statement.expose

Public Commands
* proc ::snit::compile
* proc ::snit::type
* proc ::snit::widgetadaptor
* proc ::snit::widget
* proc ::snit::typemethod
* proc ::snit::method
* proc ::snit::macro

Utility Commands
* proc ::snit::Expand
* proc ::snit::Mappend
* proc ::snit::CheckArgs
* proc ::snit::Contains
* proc ::snit::Capitalize

Snit Runtime Library

The commands defined here are used by Snit-generated code at run-time
rather than compile time.

* Object Creation
** ::snit::RT.type.typemethod.create
** ::snit::RT.widget.typemethod.create
** ::snit::RT.UniqueName
** ::snit::RT.UniqueInstanceNamespace
** ::snit::RT.OptionDbGet
* Typecomponent Management and Typemethod Caching
** ::snit::RT.TypecomponentTrace
** ::snit::RT.TypemethodCacheLookup
* Component Management and Method Caching
** ::snit::RT.Component
** ::snit::RT.ComponentTrace
** ::snit::RT.MethodCacheLookup
* Method/Variable Name Qualification
** ::snit::RT.variable
** ::snit::RT.mytypevar
** ::snit::RT.myvar
** ::snit::RT.myproc
** ::snit::RT.codename
** ::snit::RT.mytypemethod
** ::snit::RT.mymethod
** ::snit::RT.CallInstance
* Utilities
** ::snit::RT.from
* Option Handling
** ::snit::RT.method.cget
** ::snit::RT.method.configurelist
** ::snit::RT.method.configure
** ::snit::RT.GetOptionDbSpec
* Type Destruction
** ::snit::RT.typemethod.destroy
* Object Destruction
** ::snit::RT.method.destroy
* Type Introspection
** ::snit::RT.typemethod.info
** ::snit::RT.typemethod.info.typevars
** ::snit::RT.typemethod.info.instances
* Instance Introspection
** ::snit::RT.method.info
** ::snit::RT.method.info.type
** ::snit::RT.method.info.typevars
** ::snit::RT.method.info.vars
** ::snit::RT.method.info.options

