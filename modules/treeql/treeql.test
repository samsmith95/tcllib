# -*- tcl -*-
# treeql.test:  tests for the tree query language
#
# Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.

# -------------------------------------------------------------------------

source [file join \
	[file dirname [file dirname [file join [pwd] [info script]]]] \
	devtools testutilities.tcl]

testsNeedTcl     8.4
testsNeedTcltest 1.0

support {
    use struct/list.tcl struct::list
    use struct/sets.tcl struct::set
    if {[useTcllibC]} {
	useKeep struct/tree.tcl struct::tree
    } else {
	use     struct/tree.tcl struct::tree
    }
    use snit/snit.tcl   snit
}
testing {
    useLocal treeql.tcl treeql
}

# -------------------------------------------------------------------------

struct::tree::SwitchTo {}
foreach e [struct::tree::KnownImpl] {
    if {[::struct::tree::LoadAccel $e]} {
	switch -exact -- $e {
	    critcl {puts "> tree : tcllibc based"}
	    tcl    {puts "> tree : pure Tcl"}
	}
    }
}

# -------------------------------------------------------------------------
# We now run the tests. As they depend on a struct::tree, we have to
# test all the available implementations.

set tests [file join [file dirname [info script]] treeql.testsuite]

puts ""
catch {memory validate on}

foreach impl [struct::tree::Implementations] {
    struct::tree::SwitchTo $impl

    # The global variable 'impl' is part of the public API the
    # testsuit (in htmlparse_tree.testsuite) can expect from the
    # environment.

    namespace import -force struct::tree

    set usec [time {source $tests} 1]

    #puts "$impl:\t$usec"
}

catch {memory validate off}

unset usec
unset tests

#puts ""

# Reset system to fully inactive state.

struct::tree::SwitchTo {}

# -------------------------------------------------------------------------

::tcltest::cleanupTests
return
