[comment {-*- tcl -*-}]
[manpage_begin struct::graph::op n 0.3]
[copyright {2008 Andreas Kupries <andreas_kupries@users.sourceforge.net>}]
[moddesc   {Tcl Data Structures}]
[titledesc {Operation for (un)directed graph objects}]
[require Tcl 8.4]
[comment {[require struct::graph [opt 2.3]]   }]
[comment {[require struct::list  [opt 1.5]]   }]
[comment {[require struct::set   [opt 2.2.3]] }]
[description]
[para]

The package described by this document, [package struct::graph::op],
is a companion to the package [package struct::graph]. It provides a
series of common operations and algorithms applicable to (un)directed
graphs.

[para]

Despite being a companion the package is not directly dependent on
[package struct::graph], only on the API defined by that
package. I.e. the operations of this package can be applied to any and
all graph objects which provide the same API as the objects created
through [package struct::graph].

[section {Operations}]

[list_begin definitions]

[call [cmd struct::graph:op::toAdjacencyMatrix] [arg g]]

This command takes the graph [arg g] and returns a nested list
containing the adjacency matrix of [arg g].

[para]

The elements of the outer list are the rows of the matrix, the inner
elements are the column values in each row. The matrix has "[var n]+1"
rows and columns, with the first row and column (index 0) containing
the name of the node the row/column is for. All other elements are
boolean values, [const True] if there is an arc between the 2 nodes
of the respective row and column, and [const False] otherwise.

[para]

Note that the matrix is symmetric. It does not represent the
directionality of arcs, only their presence between nodes. It is also
unable to represent parallel arcs in [arg g].



[call [cmd struct::graph:op::kruskal] [arg g]]

This command takes the graph [arg g] and returns a list containing the
names of the arcs in [arg g] which span up a minimum spanning tree
(MST), or, in the case of an un-connected graph, a minimum spanning
forest. Kruskal's algorithm is used to compute the tree or forest.

[para]

The command will throw an error if one or more arcs in [arg g] have no
weight associated with them.

[para]

A note regarding the result, the command refrains from explicitly
listing the nodes of the MST as this information is implicitly
provided in the arcs already.



[call [cmd struct::graph:op::prim] [arg g]]

This command takes the graph [arg g] and returns a list containing the
names of the arcs in [arg g] which span up a minimum spanning tree
(MST), or, in the case of an un-connected graph, a minimum spanning
forest. Prim's algorithm is used to compute the tree or forest.

[para]

The command will throw an error if one or more arcs in [arg g] have no
weight associated with them.

[para]

A note regarding the result, the command refrains from explicitly
listing the nodes of the MST as this information is implicitly
provided in the arcs already.



[call [cmd struct::graph:op::isBipartite?] [arg g] [opt [arg bipartvar]]]

This command takes the graph [arg g] and returns a boolean value
indicating whether it is bipartite ([const true]) or not
([const false]). If the variable [arg bipartvar] is specified the two
partitions of the graph are there as a list, if, and only if the graph
is bipartit. If it is not the variable, if specified, is not touched.

[list_end]


[section References]

[list_begin enum]
[enum] [uri http://en.wikipedia.org/wiki/Adjacency_matrix      {Adjacency matrix}]
[enum] [uri http://en.wikipedia.org/wiki/Kruskal%27s_algorithm {Kruskal's algorithm}]
[enum] [uri http://en.wikipedia.org/wiki/Prim%27s_algorithm    {Prim's algorithm}]
[enum] [uri http://en.wikipedia.org/wiki/Bipartite_graph       {Bipartite graph}]
[list_end]


[section {BUGS, IDEAS, FEEDBACK}]

This document, and the package it describes, will undoubtedly contain
bugs and other problems.

Please report such in the category [emph {struct :: graph}] of the
[uri {http://sourceforge.net/tracker/?group_id=12883} {Tcllib SF Trackers}].

Please also report any ideas for enhancements you may have for either
package and/or documentation.


[keywords graph]
[keywords edge arc node vertex subgraph neighbour]
[keywords adjacent loop degree]
[manpage_end]
