# aes.test - Copyright (c) 2005 Thorsten Schloermann
#
# the test-values are taken from:
#     http://csrc.nist.gov/CryptoToolkit/aes/rijndael/rijndael-vals.zip
#     where only the first 12 entries of Know Answer Test for variable key and
#     variable text are used
#     Unfortunately, only encryption is tested by this.
#
#
# Monte Carlo Tests with 4 Million cycles through the algorithm will need too much time
#
# $Id: aes.test,v 1.2 2005/08/28 23:38:09 patthoyts Exp $

# -------------------------------------------------------------------------
# Initialize the test package
#
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

# -------------------------------------------------------------------------
# Ensure we test _this_ local copy and one installed somewhere else.
#
package forget aes
catch {namespace delete ::aes}
if {[catch {source [file join [file dirname [info script]] aes.tcl]} msg]} {
    puts "skipped [file tail [info script]]: $msg"
}

# -------------------------------------------------------------------------
# Setup any constraints
#

# -------------------------------------------------------------------------
# Report version in test
#
puts "- aes [package present aes] (pure Tcl)"

# -------------------------------------------------------------------------
# Now the package specific tests....
# -------------------------------------------------------------------------

# data for variable key KAT

set plaintext 00000000000000000000000000000000

array set key128 {
	1 80000000000000000000000000000000
	2 40000000000000000000000000000000
	3 20000000000000000000000000000000
	4 10000000000000000000000000000000
	5 08000000000000000000000000000000
	6 04000000000000000000000000000000
	7 02000000000000000000000000000000
	8 01000000000000000000000000000000
	9 00800000000000000000000000000000
	10 00400000000000000000000000000000
	11 00200000000000000000000000000000
	12 00100000000000000000000000000000

}

array set vk_out128 {
	1 0EDD33D3C621E546455BD8BA1418BEC8
	2 C0CC0C5DA5BD63ACD44A80774FAD5222
	3 2F0B4B71BC77851B9CA56D42EB8FF080
	4 6B1E2FFFE8A114009D8FE22F6DB5F876
	5 9AA042C315F94CBB97B62202F83358F5
	6 DBE01DE67E346A800C4C4B4880311DE4
	7 C117D2238D53836ACD92DDCDB85D6A21
	8 DC0ED85DF9611ABB7249CDD168C5467E
	9 807D678FFF1F56FA92DE3381904842F2
	10 0E53B3FCAD8E4B130EF73AEB957FB402
	11 969FFD3B7C35439417E7BDE923035D65
	12 A99B512C19CA56070491166A1503BF15
}

array set key192 {
	1 800000000000000000000000000000000000000000000000
	2 400000000000000000000000000000000000000000000000
	3 200000000000000000000000000000000000000000000000
	4 100000000000000000000000000000000000000000000000
	5 080000000000000000000000000000000000000000000000
	6 040000000000000000000000000000000000000000000000
	7 020000000000000000000000000000000000000000000000
	8 010000000000000000000000000000000000000000000000
	9 008000000000000000000000000000000000000000000000
	10 004000000000000000000000000000000000000000000000
	11 002000000000000000000000000000000000000000000000
	12 001000000000000000000000000000000000000000000000
}

array set vk_out192 {
	1 DE885DC87F5A92594082D02CC1E1B42C
	2 C749194F94673F9DD2AA1932849630C1
	3 0CEF643313912934D310297B90F56ECC
	4 C4495D39D4A553B225FBA02A7B1B87E1
	5 636D10B1A0BCAB541D680A7970ADC830
	6 07CF045786BD6AFCC147D99E45A901A7
	7 6A8E3F425A7599348F95398448827976
	8 5518276836148A00D91089A20D8BFF57
	9 F267E07B5E87E3BC20B969C61D4FCB06
	10 5A1CDE69571D401BFCD20DEBADA2212C
	11 70A9057263254701D12ADD7D74CD509E
	12 35713A7E108031279388A33A0FE2E190
}

array set key256 {
	1 8000000000000000000000000000000000000000000000000000000000000000
	2 4000000000000000000000000000000000000000000000000000000000000000
	3 2000000000000000000000000000000000000000000000000000000000000000
	4 1000000000000000000000000000000000000000000000000000000000000000
	5 0800000000000000000000000000000000000000000000000000000000000000
	6 0400000000000000000000000000000000000000000000000000000000000000
	7 0200000000000000000000000000000000000000000000000000000000000000
	8 0100000000000000000000000000000000000000000000000000000000000000
	9 0080000000000000000000000000000000000000000000000000000000000000
	10 0040000000000000000000000000000000000000000000000000000000000000
	11 0020000000000000000000000000000000000000000000000000000000000000
	12 0010000000000000000000000000000000000000000000000000000000000000
}

array set vk_out256 {
	1 E35A6DCB19B201A01EBCFA8AA22B5759
	2 5075C2405B76F22F553488CAE47CE90B
	3 49DF95D844A0145A7DE01C91793302D3
	4 E7396D778E940B8418A86120E5F421FE
	5 05F535C36FCEDE4657BE37F4087DB1EF
	6 D0C1DDDD10DA777C68AB36AF51F2C204
	7 1C55FB811B5C6464C4E5DE1535A75514
	8 52917F3AE957D5230D3A2AF57C7B5A71
	9 C6E3D5501752DD5E9AEF086D6B45D705
	10 A24A9C7AF1D9B1E17E1C9A3E711B3FA7
	11 B881ECA724A6D43DBC6B96F6F59A0D20
	12 EC524D9A24DFFF2A9639879B83B8E137
}

# data for variable text KAT

set vt_key128 00000000000000000000000000000000
set vt_key192 000000000000000000000000000000000000000000000000
set vt_key256 0000000000000000000000000000000000000000000000000000000000000000

array set vtext {
	1 80000000000000000000000000000000
	2 40000000000000000000000000000000
	3 20000000000000000000000000000000
	4 10000000000000000000000000000000
	5 08000000000000000000000000000000
	6 04000000000000000000000000000000
	7 02000000000000000000000000000000
	8 01000000000000000000000000000000
	9 00800000000000000000000000000000
	10 00400000000000000000000000000000
	11 00200000000000000000000000000000
	12 00100000000000000000000000000000
}

array set vt_out128 {
	1 3AD78E726C1EC02B7EBFE92B23D9EC34
	2 45BC707D29E8204D88DFBA2F0B0CAD9B
	3 161556838018F52805CDBD6202002E3F
	4 F5569B3AB6A6D11EFDE1BF0A64C6854A
	5 64E82B50E501FBD7DD4116921159B83E
	6 BAAC12FB613A7DE11450375C74034041
	7 BCF176A7EAAD8085EBACEA362462A281
	8 47711816E91D6FF059BBBF2BF58E0FD3
	9 B970DFBE40698AF1638FE38BD3DF3B2F
	10 F95B59A44F391E14CF20B74BDC32FCFF
	11 720F74AE04A2A435B9A7256E49378F5B
	12 2A0445F61D36BFA7E277070730CF76DA
}

array set vt_out192 {
	1 6CD02513E8D4DC986B4AFE087A60BD0C
	2 423D2772A0CA56DAABB48D2129062987
	3 1021F2A8DA70EB2219DC16804445FF98
	4 C636E35B402577F96974D8804295EBB8
	5 1566D2E57E8393C19E29F892EA28A9A7
	6 883C878FED70B36CC09D040F9619DD19
	7 06734593A974965790E715594FC34AA9
	8 F19B389948D9A45534E5BD36C984134A
	9 D8410DFC14FA6D175EC968EA8CAC514C
	10 7E6C6EBB4029A177CF7B2FDD9AC6BB7A
	11 4B51DD4850DC0A6C3A46D924003D2C27
	12 2E510A9D917B15BE32A192B12A668F23
}

array set vt_out256 {
	1 DDC6BF790C15760D8D9AEB6F9A75FD4E
	2 C7098C217C334D0C9BDF37EA13B0822C
	3 60F0FB0D4C56A8D4EEFEC5264204042D
	4 73376FBBF654D0686E0E84001477106B
	5 2F443B52BA5F0C6EA0602C7C4FD259B6
	6 75D11B0E3A68C4223D88DBF017977DD7
	7 779B38D15BFFB63D8D609D551A5CC98E
	8 5275F3D86B4FB8684593133EBFA53CD3
	9 1CEF2074B336CEC62F12DEA2F6AB1481
	10 1AEF5ABBAD9D7160874578DCD8BAE172
	11 46C525DB17E72F26BF03216846B6F609
	12 E24411F941BBE08788781E3EC52CBAA4
}
	
## Know answer tests for variable keys##

foreach i [lsort [array names key128]] {
    test aes-1.$i {aes encryption vk 128 bit} {
        string toupper [::aes::start e128 $key128($i) $plaintext]
    } $vk_out128($i)
}

foreach i [lsort [array names key192]] {
    test aes-2.$i {aes encryption vk 192 bit} {
        string toupper [::aes::start e192 $key192($i) $plaintext]
    } $vk_out192($i)
}

foreach i [lsort [array names key256]] {
    test aes-3.$i {aes encryption vk 256 bit} {
        string toupper [::aes::start e256 $key256($i) $plaintext]
    } $vk_out256($i)
}

## Know Answer Test for variable text ##

foreach i [lsort [array names vtext]] {
    test aes-4.$i {aes encryption vt 128 bit} {
        string toupper [::aes::start e128 $vt_key128 $vtext($i)]
    } $vt_out128($i)
}

foreach i [lsort [array names vtext]] {
    test aes-5.$i {aes encryption vt 192 bit} {
        string toupper [::aes::start e192 $vt_key192 $vtext($i)]
    } $vt_out192($i)
}

foreach i [lsort [array names vtext]] {
    test aes-6.$i {aes encryption vt 256 bit} {
        string toupper [::aes::start e256 $vt_key256 $vtext($i)]
    } $vt_out256($i)
}

foreach i [lsort [array names vt_out256]] {
    test aes-7.$i {aes decryption vt 256 bit} {
        string toupper [::aes::start d256 $vt_key256 $vt_out256($i)]
    } $vtext($i)
}

proc C {} {
    variable vt_key256
    variable vtext
    set crypt [::aes::start e256 $vt_key256 $vtext(1)]
}
proc D {} {
    variable vt_key256
    variable vt_out256
    set plain [::aes::start d256 $vt_key256 $vt_out256(1)]
}
puts "- encrypt 256 timing [time {C} 100]"
puts "- decrypt 256 timing [time {D} 100]"

::tcltest::cleanupTests

# Local variables:
# mode: tcl
# indent-tabs-mode: nil
# End: