# -*- tcl -*-
# md5crypt.test:  tests for the md5crypt commands
#
# This file contains a collection of tests for one or more of the Tcllib
# commands.  Sourcing this file into Tcl runs the tests and generates
# output for errors.  No output means no errors were found.
#
# Copyright (C) 2003 Pat Thoyts <patthoyts@users.sourceforge.net>
#
# RCS: @(#) $Id: md5crypt.test,v 1.1 2003/07/26 02:05:00 patthoyts Exp $

# -------------------------------------------------------------------------
# Initialize the test package
#
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

# -------------------------------------------------------------------------
# Ensure we test _this_ local copy and one installed somewhere else.
#
package forget md5crypt
catch {namespace delete ::md5crypt}
if {[catch {source [file join [file dirname [info script]] md5crypt.tcl]} msg]} {
    puts "skipped [file tail [info script]]: $msg"
    return
}

# -------------------------------------------------------------------------
# Setup any constraints
#

# -------------------------------------------------------------------------
# Now the package specific tests....
# -------------------------------------------------------------------------

if {[info command ::md5crypt::md5crypt_c] != {}} {
    puts "- md5crypt [package present md5crypt] (critcl based)"
} else {
    puts "- md5crypt [package present md5crypt] (pure Tcl)"
}

# -------------------------------------------------------------------------

test md5crypt-1.0 {md5crypt basic usage} {
    catch {::md5crypt::md5crypt} result
    string match {wrong # args: *} $result
} {1}

test md5crypt-1.1 {md5crypt basic usage} {
    catch {::md5crypt::md5crypt pw} result
    string match {wrong # args: *} $result
} {1}

test md5crypt-1.3 {md5crypt basic usage} {
    catch {::md5crypt::md5crypt pw salt other} result
    string match {wrong # args: *} $result
} {1}

# -------------------------------------------------------------------------

foreach {n salt passwd expected} {
    1    {}          a  {$1$$Ij31LCAysPM23KuPlm1wA/}
    2    {a}         a  {$1$a$44cUw6Nm5bX0muHWNIwub0}
    3    {aa}        a  {$1$aa$aM/8fu5RTEKSCJWsk9qH.0}
    4    {aaa}       a  {$1$aaa$SCk4CXyogLtcfwl2VqfSF0}
    5    {aaaa}      a  {$1$aaaa$tjZedp/Ch2UpwkJdEKLPm.}
    6    {aaaaa}     a  {$1$aaaaa$iVkHUcCwuXWk4NaYTbyUa/}
    7    {aaaaaa}    a  {$1$aaaaaa$MUMWPbGfzrHFCNm7ZHg31.}
    8    {aaaaaaa}   a  {$1$aaaaaaa$4OzJTk7W1gmppy.1Lu4nr.}
    9    {aaaaaaaa}  a  {$1$aaaaaaaa$S270EsVIz5M8Y9/k4SSEf.}
    10   {aaaaaaaaa} a  {$1$aaaaaaaa$S270EsVIz5M8Y9/k4SSEf.}
    12   {a$aaaaaaa} a  {$1$a$44cUw6Nm5bX0muHWNIwub0}
} {
    test md5passwd-2.${n} [list md5crypt salt check \"$salt\"] {
        ::md5crypt::md5crypt $passwd $salt
    } $expected
    
    # If the C code is loaded, then we have tested that so now check the
    # pure-tcl implementation as well.
    if {[info command ::md5crypt::md5crypt_c] != {}} {
        test md5passwd-2.${n}_tcl [list md5crypt salt check \"$salt\"] {
            ::md5crypt::md5crypt_tcl $passwd $salt
        } $expected
    }
}

# -------------------------------------------------------------------------

foreach {n salt passwd expected} [list \
    1    {a}  {}  {$1$a$8CfZSfErbeskipdhZHtvu.} \
    2    {a}  {a} {$1$a$44cUw6Nm5bX0muHWNIwub0} \
    3    {a}  [string repeat a 100] {$1$a$vTAcWEblAgdUlX6KBz0NM.} \
    4    {a}  [string repeat a 200] {$1$a$kC.K4D6mvUznpkjWJK8Tm0} \
] {
    test md5passwd-3.${n} {md5crypt check passwd} {
        ::md5crypt::md5crypt $passwd $salt
    } $expected
    
    # If the C code is loaded, then we have tested that so now check the
    # pure-tcl implementation as well.
    if {[info command ::md5crypt::md5crypt_c] != {}} {
        test md5passwd-3.${n}_tcl {md5crypt check passwd} {
            ::md5crypt::md5crypt_tcl $passwd $salt
        } $expected
    }
}
    
# -------------------------------------------------------------------------

::tcltest::cleanupTests

# -------------------------------------------------------------------------
# Local variables:
#   mode: tcl
#   indent-tabs-mode: nil
# End: