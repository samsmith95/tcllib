# -*- tcl -*-
# Tests for the multi-op system.
#
# Sourcing this file into Tcl runs the tests and generates output for errors.
# No output means no errors were found.
#
# Copyright (c) 2007 by Andreas Kupries <andreas_kupries@users.sourceforge.net>
# All rights reserved.
#
# RCS: @(#) $Id: multi.test,v 1.2 2007/08/10 19:40:49 andreas_kupries Exp $

# -------------------------------------------------------------------------

source [file join \
	[file dirname [file dirname [file join [pwd] [info script]]]] \
	devtools testutilities.tcl]

testsNeedTcl     8.4
testsNeedTcltest 2.1

support {
    use      snit/snit.tcl   snit
    use      struct/list.tcl struct::list
    use      wip/wip.tcl     wip
    useLocal fileutil.tcl    fileutil
    useLocal multiop.tcl     fileutil::multi::op
}
testing {
    useLocalKeep multi.tcl   fileutil::multi
}

# -------------------------------------------------------------------------
# Now the package specific tests....

proc setup {} {
    makeDirectory origin
    makeFile   {} origin/anneliese
    makeFile   {} origin/bertram
    makeFile   {} origin/connie
    makeFile   {} origin/detlev
    makeDirectory origin/egon
    makeFile   {} origin/egon/suse
    makeFile   {} origin/egon/bettina
    makeDirectory destination
    return
}

proc cleanup {} {
    removeDirectory origin
    removeDirectory destination
    return
}

proc scan {d} {
    set base [file normalize $::tcltest::temporaryDirectory/$d]
    return [lsort -dict \
		[struct::list map [fileutil::find $base] \
		     [list fileutil::stripPath $base]]]
}

proc cleanup_all {} {
    rename setup       {}
    rename cleanup     {}
    rename scan        {}
    rename cleanup_all {}
    unset ::src ::dst
    return
}

set src [tempPath origin]
set dst [tempPath destination]

# -------------------------------------------------------------------------

set dir $::tcltest::temporaryDirectory

test multi-1.0 {fileutil multi operations, copying} -setup {
    setup
} -body {
    fileutil::multi reset copy from $src to $dst the *e* except for *n*
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
} -result {{anneliese bertram connie detlev egon egon/bettina egon/suse} {bertram detlev}}

test multi-1.1 {fileutil multi operations, moving} -setup {
    setup
} -body {
    fileutil::multi reset move from $src into $dst the *e* except for *n*
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
} -result {{anneliese connie egon egon/bettina egon/suse} {bertram detlev}}

test multi-1.1 {fileutil multi operations, deletion} -setup {
    setup
} -body {
    fileutil::multi reset copy from $src into $dst the *e* except for *n*
    fileutil::multi reset remove in $dst the *a*
    scan destination
} -cleanup {
    cleanup
} -result {detlev}

test multi-1.2 {fileutil multi operations, recursive copying} -setup {
    setup
} -body {
    fileutil::multi reset recursively copy the * from $src to $dst
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
} -result {{anneliese bertram connie detlev egon egon/bettina egon/suse} {anneliese bertram connie detlev egon egon/bettina egon/suse}}

test multi-1.3 {fileutil multi operations, recursive move} -setup {
    setup
} -body {
    fileutil::multi reset recursively move the * from $src to $dst
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
} -result {egon {anneliese bertram connie detlev egon egon/bettina egon/suse}}

test multi-1.4 {fileutil multi operations, expand and save} -setup {
    setup
} -body {
    fileutil::multi reset expand the *a* in $src -> v
    set v
} -cleanup {
    cleanup ; unset v
} -result {anneliese bertram}

test multi-1.5 {fileutil multi operations, expand and save} -setup {
    setup
} -body {
    set v {bertram egon}
    fileutil::multi reset copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
} -result {bertram egon egon/bettina egon/suse}

# -------------------------------------------------------------------------

test multi-2.0 {fileutil multi operations, platform conditionals, not matching, win on unix} -setup {
    setup
} -constraints unix -body {
    set v {bertram egon}
    fileutil::multi reset for-win copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
} -result {}

test multi-2.1 {fileutil multi operations, platform conditionals, not matching, unix on win} -setup {
    setup
} -constraints win -body {
    set v {bertram egon}
    fileutil::multi reset for-unix copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
} -result {}

test multi-2.2 {fileutil multi operations, platform conditionals, matching, unix} -setup {
    setup
} -constraints unix -body {
    set v {bertram}
    fileutil::multi reset for-unix copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
} -result {bertram}

test multi-2.3 {fileutil multi operations, platform conditionals, matching, windows} -setup {
    setup
} -constraints win -body {
    set v {bertram}
    fileutil::multi reset for-win copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
} -result {bertram}

# -------------------------------------------------------------------------

proc rec {args} {
    global  res
    lappend res $args
    return
}

test multi-3.0 {fileutil multi operations, invoke user operation} -setup {
    setup
} -constraints unix -body {
    set v {bertram egon}
    set res {}
    fileutil::multi reset invoke rec the-set v from $src to $dst as X
    set res
} -cleanup {
    cleanup ; unset v res
} -result [list [list $src $dst {bertram X egon egon}]]

# -------------------------------------------------------------------------
cleanup_all
testsuiteCleanup
return
