# -*- tcl -*-
# Tests for the multiplexer facility.
#
# Sourcing this file into Tcl runs the tests and generates output for
# errors.
# No output means no errors were found.
#
# Copyright (c) 2003 by David N. Welton <davidw@dedasys.com>.
#
# $Id: multiplexer.test,v 1.1 2003/05/19 08:28:48 davidw Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

set auto_path "[file join [file dirname [info script]] .. log] $auto_path"
set auto_path "[file dirname [info script]] $auto_path"
package require multiplexer

test multiplexer-1.0 {create multiplexer} {
    set mp [multiplexer::create]
    set ns [namespace children ::multiplexer]
    ${mp}::destroy
    set ns
} {::multiplexer::mp0}

test multiplexer-1.1 {destroy multiplexer} {
    set mp [multiplexer::create]
    ${mp}::destroy
    namespace children multiplexer
} {}

test multiplexer-2.1 {start multiplexer} {
    set mp [multiplexer::create]
    ${mp}::Init 37465
    set res ""
    if { [catch {
	set sk [socket localhost 37465]
    } err] } { set res $err }
    ${mp}::destroy
    set res
} {}

proc Get {chan} {
    gets $chan line
    if { [info exists ::forever] } {
	incr ::forever
    } else {
	set ::forever 1
    }
}

test multiplexer-3.1 {send multiplexer - line buffered} {
    set ::forever 0
    set mp [multiplexer::create]
    ${mp}::Init 37465
    set res ""
    set sk1 [socket localhost 37465]
    set sk2 [socket localhost 37465]
    set sk3 [socket localhost 37465]
    fileevent $sk2 readable [list Get $sk2]
    fileevent $sk3 readable [list Get $sk3]

    fconfigure $sk1 -buffering line
    fconfigure $sk2 -buffering line
    fconfigure $sk3 -buffering line

    update
    puts $sk1 "Multiplexer test message 3.1"
    # Each socket should receive a copy of the above message, so we
    # have to vwait's.
    vwait ::forever
    vwait ::forever
    ${mp}::destroy
    set ::forever
} {2}

proc Get2 {chan} {
    set line [read -nonewline $chan]
    puts $line
    if { [info exists ::forever] } {
	incr ::forever
    } else {
	set ::forever 1
    }
}

test multiplexer-3.2 {send multiplexer - not buffered} {
    set ::forever 0
    set mp [multiplexer::create]
    ${mp}::Init 37465
    set res ""
    set sk1 [socket localhost 37465]
    set sk2 [socket localhost 37465]
    set sk3 [socket localhost 37465]
    fileevent $sk2 readable [list Get2 $sk2]
    fileevent $sk3 readable [list Get2 $sk3]

    fconfigure $sk1 -buffering none
    fconfigure $sk2 -buffering none -blocking 0
    fconfigure $sk3 -buffering none -blocking 0

    update
    puts -nonewline $sk1 "Multiplexer test message 3.2"
    # Each socket should receive a copy of the above message, so we
    # have to vwait's.
    vwait ::forever
    vwait ::forever
    ${mp}::destroy
    set ::forever
} {2}


proc TestAccessFilter {data chan clientaddress clientport} {
    puts "$data $chan $clientaddress $clientport"
    return "This data has been filtered!\r\n"
}

proc Get3 {chan} {
    set line [read -nonewline $chan]
    puts $line
    set ::forever $line
}


test multiplexer-4.1 {add access filter} {
    set ::forever 0
    set mp [multiplexer::create]
    ${mp}::Init 37465
    ${mp}::AddFilter TestAccessFilter
    set res ""
    set sk1 [socket localhost 37465]
    set sk2 [socket localhost 37465]
    fileevent $sk2 readable [list Get3 $sk2]

    fconfigure $sk1 -buffering line
    fconfigure $sk2 -buffering line

    update
    puts $sk1 "Multiplexer test message 4.1"
    # Each socket should receive a copy of the above message, so we
    # have to vwait's.
    vwait ::forever
    ${mp}::destroy
    set ::forever
} {1}


::tcltest::cleanupTests
return
