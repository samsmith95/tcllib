[comment {-*- tcl -*- doctools manpage}]
[manpage_begin math::special n 0.1]
[copyright {2004 Arjen Markus <arjenmarkus@users.sourceforge.net>}]
[moddesc   {Math}]
[titledesc {Special mathematical functions}]

[require Tcl [opt 8.3]]
[require math::special [opt 0.1]]

[description]
[para]
This package implements several so-called special functions, like
the Gamma function, the Bessel functions and such.

[para]
Each function is implemented by a procedure that bares its name (well,
in close approximation):

[list_begin bullet]
[bullet]
J0 for the zeroth-order Bessel function of the first kind

[bullet]
J1 for the first-order Bessel function of the first kind

[bullet]
J1/2 for the half-order Bessel function of the first kind

[bullet]
I_n for the modified Bessel function of the first kind of order n

[bullet]
Gamma for the Gamma function, erf and erfc for the error function and
the complementary error function.

[list_end]

[section "PROCEDURES"]

The package defines the following public procedures:

[list_begin definitions]

[call [cmd ::math::special::Beta] [arg x] [arg y]]

Compute the Beta function for arguments "x" and "y"

[list_begin arg]
[arg_def float x] First argument for the Beta function

[arg_def float y] Second argument for the Beta function
[list_end]

[nl]

[call [cmd ::math::special::Gamma] [arg x] [arg y]]

Compute the Gamma function for argument "x"

[list_begin arg]
[arg_def float x] Argument for the Gamma function
[list_end]

[nl]

[call [cmd ::math::special::erf] [arg x]]

Compute the error function for argument "x"

[list_begin arg]
[arg_def float x] Argument for the error function
[list_end]

[nl]

[call [cmd ::math::special::erfc] [arg x]]

Compute the complementary error function for argument "x"

[list_begin arg]
[arg_def float x] Argument for the complementary error function
[list_end]

[nl]

[call [cmd ::math::special::J0] [arg x]]

Compute the zeroth-order Bessel function of the first kind for the
argument "x"

[list_begin arg]
[arg_def float x] Argument for the Bessel function
[list_end]

[nl]

[call [cmd ::math::special::J1] [arg x]]

Compute the first-order Bessel function of the first kind for the
argument "x"

[list_begin arg]
[arg_def float x] Argument for the Bessel function
[list_end]

[nl]

[call [cmd ::math::special::J1/2] [arg x]]

Compute the half-order Bessel function of the first kind for the
argument "x"

[list_begin arg]
[arg_def float x] Argument for the Bessel function
[list_end]

[call [cmd ::math::special::I_n] [arg x]]

Compute the modified Bessel function of the first kind of order n for
the argument "x"

[list_begin arg]
[arg_def int x] Positive integer order of the function
[arg_def float x] Argument for the function
[list_end]

[list_end]

[section "REMARKS ON THE IMPLEMENTATION"]

It should be noted, that the actual implementation of J0 and J1 depends
on straightforward Gaussian quadrature formulas. The (absolute) accuracy
of the results is of the order 1.0e-4 or better. The main reason to
implement them like that was that it was fast to do (the formulas are
simple) and the computations are fast too.

[para]
The implementation of J1/2 does not suffer from this: this function can
be expressed exactly in terms of elementary functions.

[para]
The functions J0 and J1 are the ones you will encounter most frequently
in practice.

[para]
The computation of I_n is based on Miller's algorithm for computing the
minimal function from recurrence relations.

[para]
The computation of the Gamma and Beta functions relies on the
combinatorics package, whereas that of the error functions relies on the
statistics package.


[keywords math "special functions" "Bessel functions" "error function"]

[manpage_end]

