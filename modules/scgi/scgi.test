###
# scgi.test - Copyright (c) 2015 Sean Woods
#
# Unit tests of the SCGI server
###

# -------------------------------------------------------------------------

source [file join \
	[file dirname [file dirname [file join [pwd] [info script]]]] \
	devtools testutilities.tcl]

testsNeedTcl     8.5
testsNeedTcltest 2

testsNeed TclOO 1

support {
  use mime/mime.tcl mime
  use ooutil/oometa.tcl oo::meta
  use ncgi/ncgi.tcl ncgi
  use httpd/httpd.tcl httpd
}
testing {
  useLocal scgi-server.tcl scgi::server
  useLocal scgi-app.tcl scgi::app
}

# -------------------------------------------------------------------------

namespace eval ::scgi::test {}

###
# Build the server
###
oo::class create ::scgi::test::reply {  
  superclass ::scgi::reply

  property reply_headers Content-Type: text/plain


  method error {code {msg {}}} {
    my reset
    my variable data
    if {![info exists data(url)]} {
      set data(url) {}
    }
    set errorstring [my meta getnull error_codes $code]
    my meta set reply_headers Content-Type: {text/plain}
    my meta set reply_status "$code $errorstring"
    my puts "
$code $errorstring
Got the error $code $errorstring

while trying to obtain $data(url)
"
    my output
  }

  method reset {} {
    my variable reply_headers reply_body
    set reply_headers {Status: {200 OK} Content-Type: text/plain}
    set reply_body {}
  }
  
  method content {} {
    my reset
    set dat [my meta get query_headers]
    switch [dict get $dat REQUEST_URI] {
      /time {
	my puts [clock seconds]
      }
      /error {
	error {
The programmer asked me to die this way
	}
      }
      /echo -
      default {
        my variable query_body
        my puts $query_body      
      }
    }
  }
}

oo::class create scgi::test::app {
  superclass ::scgi::app
  
  property reply_class ::scgi::test::reply
}

scgi::test::app create TESTAPP port 10001

test scgi-client-0001 {Do an echo request} {

set reply [::scgi::test::send 10001 {REQUEST_METHOD POST
REQUEST_URI /echo

THIS IS MY CODE
}]
} {Status: 200 OK
Content-Type: text/plain
Content-length: 15

THIS IS MY CODE}

test scgi-client-0002 {Do another echo request} {
set reply [::scgi::test::send 10001 {REQUEST_METHOD POST
REQUEST_URI /echo

THOUGH THERE ARE MANY LIKE IT
}]
} {Status: 200 OK
Content-Type: text/plain
Content-length: 29

THOUGH THERE ARE MANY LIKE IT}

test scgi-client-0003 {Do another echo request} {
set reply [::scgi::test::send 10001 {REQUEST_METHOD POST
REQUEST_URI /echo

THIS ONE ALONE IS MINE
}]
} {Status: 200 OK
Content-Type: text/plain
Content-length: 22

THIS ONE ALONE IS MINE}

test scgi-client-0004 {URL Generates Error} {

set reply [::scgi::test::send 10001 {REQUEST_METHOD POST
REQUEST_URI /error

THIS ONE ALONE IS MINE
}] } {Status: 500 Server Internal Error
Content-Type: text/plain
Content-length: 89

500 Server Internal Error
Got the error 500 Server Internal Error

while trying to obtain}

set checkreply [subst {Status: 200 OK
Content-Type: text/plain
Content-length: 10

[clock seconds]}]

test scgi-client-0005 {URL Different output with a different request} {
set reply [::scgi::test::send 10001 {REQUEST_METHOD POST
REQUEST_URI /time

THIS ONE ALONE IS MINE
}] } $checkreply

# -------------------------------------------------------------------------

testsuiteCleanup

# Local variables:
# mode: tcl
# indent-tabs-mode: nil
# End: