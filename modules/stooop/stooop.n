'\"
'\" Copyright (c) 2001 by Jean-Luc Fontaine <jfontain@free.fr>.
'\" This code may be distributed under the same terms as Tcl.
'\"
'\" $Id: stooop.n,v 1.2 2001/12/10 09:07:31 jfontain Exp $
.so man.macros
.TH stooop n 1.0 Stooop "Simple Tcl Only Object Oriented Programming"
.BS
'\" Note: do not modify the .SH NAME line immediately below!
.SH NAME
::stooop \- Object oriented extension.
.SH SYNOPSIS
\fBpackage require Tcl 8.3\fR
.sp
\fBpackage require stooop 4.2\fR
.br
\fBnamespace import stooop::*\fR
.sp
\fBclass\fR \fIname body\fR
.sp
\fBnew\fR \fIclass ?arg arg ...?\fR
.sp
\fBdelete\fR \fIobject ?object ...?\fR
.sp
\fBvirtual\fR \fIproc name {\fR\fBthis\fR \fI?arg arg ...?} ?body?\fR
.sp
\fBclassof\fR \fIobject\fR
.sp
\fBnew\fR \fIobject\fR
.BE
.SH DESCRIPTION
.PP
This package provides commands to extend Tcl in an object oriented manner, using a familiar C++ like syntax and behaviour. Stooop only introduces a few new commands: \fBclass\fR, \fBnew\fR, \fBdelete\fR, \fBvirtual\fR and \fBclassof\fR. Along with a few coding conventions, that is basically all you need to know to use stooop. Stooop is meant to be as simple to use as possible. 
.sp
This manual is very succinct and is to be used as a quick reminder for the programmer, who should have read the thorough \fIstooop.html\fR HTML documentation at this point.
.TP
\fBclass\fR \fIname body\fR
This command creates a class. The body, similar in contents to a Tcl namespace (which a class actually also is), contains member procedure definitions. Member procedures can also be defined outside the class body, by prefixing their name with \fIclass::\fR, as you would proceed with namespace procedures.
.RS
.TP
\fIproc class {\fR\fBthis\fR \fI?arg arg ...?} ?base {?arg arg ...?} ...? body\fR
This is the constructor procedure for the class. It is invoked following a \fInew\fR invocation on the class. It must have the same name as the class and a first argument named \fIthis\fR. Any number of base classes specifications, including arguments to be passed to their constructor, are allowed before the actual body of the procedure.
.TP
\fIproc ~class {\fR\fBthis\fR\fI} body\fR
This is the destructor procedure for the class. It is invoked following a \fIdelete\fR invocation. Its name must be the concatenation of a single \fI~\fR character followed by the class name (as in C++). It must have a single argument named \fIthis\fR.
.TP
\fIproc name {\fR\fBthis\fR \fI?arg arg ...?} body\fR
This is a member procedure of the class, as its first argument is named \fIthis\fR. It allows a simple access of member data for the object referenced by \fIthis\fR inside the procedure. For example: \fIset ($this,data) 0\fR.
.TP
\fIproc name {?arg arg ...?} body\fR
This is a static (as in C++) member procedure of the class, as its first argument is not named \fIthis\fR. Static (global) class data can be accessed as in: \fIset (data) 0\fR.
.TP
\fIproc class {\fR\fBthis copy\fI} body\fR
This is the optional copy procedure for the class. It must have the same name as the class and exactly 2 arguments named \fIthis\fR and \fIcopy\fR. It is invoked following a \fInew\fR invocation on an existing object of the class.
.RE
.TP
\fBnew\fR \fIclass ?arg arg ...?\fR
This command is used to create an object. The first argument is the class name and is followed by the arguments needed by the corresponding class constructor. A unique identifier for the object just created is returned.
.TP
\fBdelete\fR \fIobject ?object ...?\fR
This command is used to delete one or several objects. It takes one or more object identifiers as argument(s).
.TP
\fBvirtual\fR \fIproc name {\fR\fBthis\fR \fI?arg arg ...?} ?body?\fR
The \fIvirtual\fR specifier may be used on member procedures to achieve dynamic binding. A procedure in a base class can then be redefined (overloaded) in the derived class(es). If the base class procedure is invoked on an object, it is actually the derived class procedure which is invoked, if it exists. If the base class procedure has no body, then it is considered to be a pure virtual and the derived class procedure is always invoked. 
.TP
\fBclassof\fR \fIobject\fR
This command returns the class of the existing object passed as single parameter.
.TP
\fBnew\fR \fIobject\fR
This command is used to create an object by copying an existing object. The copy constructor of the corresponding class is invoked if it exists, otherwise a simple copy of the copied object data members is performed.
.SH DEBUGGING
.TP
Environment variables
.RS
.TP
STOOOPCHECKDATA
Setting this variable to any true value will cause stooop to check for invalid member or class data access.
.TP
STOOOPCHECKPROCEDURES
Setting this variable to any true value will cause stooop to check for invalid member procedure arguments and pure interface classes instanciation.
.TP
STOOOPCHECKALL
Setting this variable to any true value will cause stooop to activate both procedure and data member checking.
.TP
STOOOPCHECKOBJECTS
Setting this variable to any true value will cause stooop to activate object checking. The following stooop namespace procedures then become available for debugging: \fIprintObjects\fR, \fIrecord\fR and \fIreport\fR.
.TP
STOOOPTRACEPROCEDURES
Setting this environment variable to either \fIstdout\fR, \fIstderr\fR or a file name, activates procedure tracing. The stooop library will then output to the specified channel 1 line of informational text for each member procedure invocation.
.TP
STOOOPTRACEPROCEDURESFORMAT
Defines the trace procedures output format. Defaults to \fI"class: %C, procedure: %p, object: %O, arguments: %a"\fR.
.TP
STOOOPTRACEDATA
Setting this environment variable to either \fIstdout\fR, \fIstderr\fR or a file name, activates data tracing. The stooop library will then output to the specified channel 1 line of informational text for each member data access.
.TP
STOOOPTRACEDATAFORMAT
Defines the trace data output format. Defaults to \fI"class: %C, procedure: %p, array: %A, object: %O, member: %m, operation: %o, value: %v"\fR.
.TP
STOOOPTRACEDATAOPERATIONS
When tracing data output, by default, all read, write and unsetting accesses are reported, but the user can set this variable to any combination of the \fIr\fR, \fIw\fR and \fIu\fR letters for more specific tracing (please refer to the \fItrace\fR Tcl manual page for more information).
.TP
STOOOPTRACEALL
Setting this environment variable to either \fIstdout\fR, \fIstderr\fR or a file name, enables both procedure and data tracing.
.RE
.TP
\fB::stooop::printObjects\fR \fI?pattern?\fR
Prints an ordered list of existing objects, in creation order, oldest first. Each output line contains the class name, object identifier and the procedure within which the creation occured. The optional pattern argument (as in the Tcl \fIstring match\fR command) can be used to limit the output to matching class names.
.TP
\fB::stooop::record\fR
When invoked, a snapshot of all existing stooop objects is taken. Reporting can then be used at a later time to see which objects were created or deleted in the interval.
.TP
\fB::stooop::report\fR \fI?pattern?\fR
Prints the created and deleted objects since the \fIstooop::record\fR procedure was invoked last. If present, the pattern argument limits the output to matching class names.
.SH EXAMPLES
Please see the \fIstooop.html\fR HTML documentation.
.SH KEYWORDS
class object oriented C++
