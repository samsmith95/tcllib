[comment {-*- tcl -*- doctools manpage}]
[manpage_begin math::interpolate n 0.2]
[copyright {2004 Arjen Markus <arjenmarkus@users.sourceforge.net>}]
[moddesc   {Math}]
[titledesc {Optimisation routines}]

[require Tcl [opt 8.3]]
[require struct]
[require math::interpolate [opt 0.2]]

[description]
[para]
This package implements several interpolation algorithms:

[list_begin bullet]
[bullet]
Interpolation into a table (one or two independent variables), this is useful
for example, if the data are static, like with tables of statistical functions.

[bullet]
Linear interpolation into a given set of data (organised as (x,y) pairs).

[bullet]
Lagrange interpolation. This is mainly of theoretical interest, because there is
no guarantee about error bounds. One possible use: if you need a line or
a parabola through given points (it will calculate the values, but not return
the coefficients).

[bullet]
Spatial interpolation using a straightforward distance-weight method. This procedure
allows any number of spatial dimensions and any number of dependent variables.

[list_end]

[para]
This document describes the procedures and explains their usage.

[section "PROCEDURES"]

The interpolation package defines the following public procedures:

[list_begin definitions]

[call [cmd ::math::interpolate::defineTable] [arg name] [arg colnames] [arg values]]

Define a table with one or two independent variables (the distinction is implicit in
the data). The procedure returns the name of the table - this name is used whenever you
want to interpolate the values. [emph Note:] this procedure is a convenient wrapper for the
struct::matrix procedure. Therefore you can access the data at any location in your program.

[list_begin arg]
[arg_def string name in] Name of the table to be created

[arg_def list colnames in] List of column names

[arg_def list values in] List of values (the number of elements should be a
multiple of the number of columns. See [sectref EXAMPLES] for more information on the
interpretation of the data.

[nl]
The values must be sorted with respect to the independent variable(s).

[list_end]
[nl]


[call [cmd ::math::interpolate::interp-1d-table] [arg name] [arg xval]]

Interpolate into the one-dimensional table "name" and return a list of values, one for
each dependent column.

[list_begin arg]
[arg_def string name in] Name of an existing table

[arg_def float xval in] Value of the independent [emph row] variable

[list_end]

[nl]


[call [cmd ::math::interpolate::interp-table] [arg name] [arg xval] [arg yval]]

Interpolate into the two-dimensional table "name" and return the interpolated value.

[list_begin arg]
[arg_def string name in] Name of an existing table

[arg_def float xval in] Value of the independent [emph row] variable

[arg_def float yval in] Value of the independent [emph column] variable

[list_end]

[nl]


[call [cmd ::math::interpolate::interp-table] [arg name] [arg xval] [arg yval]]

Interpolate into the two-dimensional table "name" and return the interpolated value.

[list_begin arg]
[arg_def string name in] Name of an existing table

[arg_def float xval in] Value of the independent [emph row] variable

[arg_def float yval in] Value of the independent [emph column] variable

[list_end]

[nl]


[call [cmd ::math::interpolate::interp-linear] [arg xyvalues] [arg xval]]

Interpolate linearly into the list of x,y pairs and return the interpolated value.

[list_begin arg]

[arg_def list xyvalues in] List of pairs of (x,y) values, sorted to increasing x.
They are used as the breakpoints of a piecewise linear function.

[arg_def float xval in] Value of the independent variable for which the value of y
must be computed.

[list_end]

[nl]


[call [cmd ::math::interpolate::interp-lagrange] [arg xyvalues] [arg xval]]

Use the list of x,y pairs to construct the unique polynomial of lowest degree
that passes through all points and return the interpolated value.

[list_begin arg]

[arg_def list xyvalues in] List of pairs of (x,y) values

[arg_def float xval in] Value of the independent variable for which the value of y
must be computed.

[list_end]

[nl]
[call [cmd ::math::interpolate::interp-spatial] [arg xyvalues] [arg coord]]

Use a straightforward interpolation method with weights as function of the
inverse distance to interpolate in 2D and N-dimensional space

[nl]
The list xyvalues is a list of lists:
[example {
    {   {x1 y1 z1 {v11 v12 v13 v14}}
	{x2 y2 z2 {v21 v22 v23 v24}}
	...
    }
}]
The last element of each inner list is either a single number or a list in itself.
In the latter case the return value is a list with the same number of elements.

[nl]
The method is influenced by the search radius and the power of the inverse distance

[list_begin arg]
[arg_def list xyvalues in] List of lists, each sublist being a list of coordinates and
of dependent values.

[arg_def list coord in] List of coordinates for which the values must be calculated

[list_end]

[nl]


[call [cmd ::math::interpolate::interp-spatial-params] [arg max_search] [arg power]]

Set the parameters for spatial interpolation

[list_begin arg]
[arg_def float max_search in] Search radius (data points further than this are ignored)

[arg_def integer power in] Power for the distance (either 1 or 2; defaults to 2)

[list_end]
[list_end]


[section EXAMPLES]
[emph TODO]

[keywords math interpolation "spatial interpolation"]

[manpage_end]
