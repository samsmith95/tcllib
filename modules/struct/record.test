#------------------------------------------------------------
# record.test --
#
#    test suite for struct::record module
#
# Tcl tests for testing the struct::record package, which
# loosely immitates a 'C' structure. Invoke this test suite
# by: tclsh record.test
#
#------------------------------------------------------------
#
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

source [file join [file dirname [info script]] record.tcl]
namespace import struct::record::*

test record-0.1 {record define} {

	record define phones {home work cell}

} ::phones

test record-0.1 {record define - multi line} {

    record define contact {
	    first
		middle
		last
		{record phones phlist}
    }
} ::contact

test record-0.1 {record define - multi line} {
    record define mycontact {
        age
        sex
        {record contact cont}
    }
} ::mycontact

test record-0.1 {definition with instantiation} {
    record define location {
        street
        city
	state
	{country USA}
	} loc(1) loc(5)
} ::location

test record-0.1 {test error with circular records} {
    record define circular {
	one
	{record circular cir}
    } cir(1)
} ""

test record-0.1 {single instance} {
    contact cont(1)
} ::cont(1)

test record-0.1 {auto instance} {
    contact #auto
} ::contact0

test record-0.1 {instance of double nested record} {
    mycontact #auto
} ::mycontact0

test record-0.1 {setting a instance var via alias} {
	cont(1).first Brett
} Brett

test record-0.1 {setting a nested instance var via alias} {
	cont(1).phlist.cell 425-555-1212
} 425-555-1212

test record-0.1 {setting a double nested instance var via alias} {
    mycontact0.cont.phlist.cell 206-555-1212
} 206-555-1212

test record-0.1 {setting values via config} {
    cont(1) config -middle Allen -last Schwarz
} ""

test record-0.1 {setting a double nested instance  via config} {
    mycontact0 config -cont.phlist.cell 206-555-1212
} ""

test record-0.1 {get a value via cget} {
    cont(1) cget -first -middle -last
} [list Brett Allen Schwarz]

test record-0.1 {get a double nested value via cget} {
    mycontact0 cget -cont.phlist.cell
} 206-555-1212

test record-0.1 {get a value via alias} {
    cont(1).first
} Brett

test record-0.1 {record default value} {
    loc(1) cget -country
} USA

test record-0.1 {setting values via config} {
    loc(1) config -street somestreet -city somecity -state somestate -country somecountry
} ""

test record-0.1 {setting nested vars via config} {
    cont(1) config -phlist.home 425-555-1212
} ""

test record-0.1 {test value of nested member} {
    cont(1) cget -phlist.home
} 425-555-1212

test record-0.1 {config with no values} {
    loc(1) config
} [list -street somestreet -city somecity -state somestate -country somecountry]

test record-0.1 {get with no values} {
    loc(1) cget
} [list -street somestreet -city somecity -state somestate -country somecountry]

test record-0.1 {get with just instance command} {
    loc(1)
} [list -street somestreet -city somecity -state somestate -country somecountry]

test record-0.1 {get a nest value via alias} {
	cont(1).phlist.cell
} 425-555-1212

test record-0.1 {set values during instantiation} {
    location loc(2) -street street2 -city city2 -state state2 -country country2
} ::loc(2)

test record-0.1 {get the above value via alias} {
    loc(2).street
} street2

test record-0.1 {set values during instantiation - nested record} {
    contact cont(2) -first John -middle Q -last Doe -phlist [list home 425-555-1212 work 425-555-1222 cell 425-555-1111]
} ::cont(2)

test record-0.1 {copy one instance to another during creation} {
    eval contact cont(3) [cont(1)]
} ::cont(3)

test record-0.1 {get the above values via alias} {
    cont(2).phlist.home
} 425-555-1212

test record-0.1 {copy one definition to another definition} {
    record define new_contact [record show members contact]
} ::new_contact

test record-0.1 {show defined records} {
    record show records
} [lsort [list ::phones ::contact ::location ::new_contact ::mycontact]]

test record-0.1 {show members} {
    record show members phones
} [list home work cell]

test record-0.1 {show members - with default value} {
    record show members location
} [list street city state [list country USA]]

test record-0.1 {show members - nested record} {
    record show members contact
} [list first middle last [list record phones phlist]]

test record-0.1 {show values} {
    record show values loc(1)
} [list -street somestreet -city somecity -state somestate -country somecountry]

test record-0.1 {show values - nested} {
    record show values cont(1)
} [list -first Brett -middle Allen -last Schwarz -phlist [list -home 425-555-1212 -work {} -cell 425-555-1212]]

test record-0.1 {show instances} {
    record show instance location
} [list ::loc(1) ::loc(2) ::loc(5)]


test record-0.1 {delete an instance} {
    record delete instance loc(2)
} ""

test record-0.1 {delete a nested instance} {
    record delete instance cont(2)
} ""

test record-0.1 {delete a record} {
    record delete record location
} ""

test record-0.1 {test existence of an instance that was deleted} {
	record exists instance loc(1)
} 0

test record-0.1 {show existence of an instance} {
	record exists instance cont(1)
	
} 1

test record-0.1 {show non-existent instance} {
	record exists instance junk
	
} 0

test record-0.1 {show existence of record} {
	record exists record contact
	
} 1


##
##    NAMESPACE TESTS
##
test record-0.1 {record define} {

	namespace eval myns {
	record define phones {home work cell}
	}

} ::myns::phones



test record-0.1 {record define - multi line} {

    record define ::myns::contact {
	    first
		middle
		last
		{record phones phlist}
    }
} ::myns::contact

test record-0.1 {definition with instantiation} {
	namespace eval myns {
    record define location {
	    street
		city
		state
		{country USA}
	} loc(1) loc(5)
	}
} ::myns::location

test record-0.1 {test error with circular records} {
	namespace eval myns {
    record define circular {
		one
	    {record ::myns::circular cir}
	} cir(1)
	}
} ""

test record-0.1 {single instance} {
	namespace eval myns {
    contact cont(1)
	}
} ::myns::cont(1)

test record-0.1 {auto instance} {
	namespace eval myns {
    contact #auto
	}
} ::myns::contact0

test record-0.1 {setting a instance var via alias} {
	myns::cont(1).first Brett
} Brett

test record-0.1 {setting a nested instance var via alias} {
	myns::cont(1).phlist.cell 425-555-1212
} 425-555-1212

test record-0.1 {setting values via config} {
     myns::cont(1) config -middle Allen -last Schwarz
} ""

test record-0.1 {get a value via cget} {
     myns::cont(1) cget -first -middle -last
} [list Brett Allen Schwarz]

test record-0.1 {record default value} {
     myns::loc(1) cget -country
} USA

test record-0.1 {setting values via config} {
     myns::loc(1) config -street somestreet -city somecity -state somestate -country somecountry
} ""

test record-0.1 {setting nested vars via config} {
     myns::cont(1) config -phlist.home 425-555-1212
} ""

test record-0.1 {test value of nested member} {
     myns::cont(1) cget -phlist.home
} 425-555-1212

test record-0.1 {config with no values} {
     myns::loc(1) config
} [list -street somestreet -city somecity -state somestate -country somecountry]

test record-0.1 {get with no values} {
     myns::loc(1) cget
} [list -street somestreet -city somecity -state somestate -country somecountry]

test record-0.1 {get with just instance command} {
     myns::loc(1)
} [list -street somestreet -city somecity -state somestate -country somecountry]

test record-0.1 {get a nest value via alias} {
	 myns::cont(1).phlist.cell
} 425-555-1212

test record-0.1 {set values during instantiation} {
	 namespace eval myns {
     location loc(2) -street street2 -city city2 -state state2 -country country2
	 }
} ::myns::loc(2)

test record-0.1 {get the above value via alias} {
     myns::loc(2).street
} street2

test record-0.1 {set values during instantiation - nested record} {
	 namespace eval myns {
     contact cont(2) -first John -middle Q -last Doe -phlist [list home 425-555-1212 work 425-555-1222 cell 425-555-1111]
    }
} ::myns::cont(2)

test record-0.1 {get the above values via alias} {
     myns::cont(2).phlist.home
} 425-555-1212


test record-0.1 {show defined records} {
    record show records
} [lsort [list ::contact ::myns::phones ::myns::contact ::myns::location ::new_contact ::phones ::mycontact]]

test record-0.1 {show members} {
    record show members myns::phones
} [list home work cell]

test record-0.1 {show members - with default value} {
    record show members myns::location
} [list street city state [list country USA]]

test record-0.1 {show members - nested record} {
    record show members myns::contact
} [list first middle last [list record phones phlist]]

test record-0.1 {show values} {
    record show values myns::loc(1)
} [list -street somestreet -city somecity -state somestate -country somecountry]

test record-0.1 {show values - nested} {
    record show values myns::cont(1)
} [list -first Brett -middle Allen -last Schwarz -phlist [list -home 425-555-1212 -work {} -cell 425-555-1212]]

test record-0.1 {show instances} {
    record show instance myns::location
} [list ::myns::loc(1) ::myns::loc(2) ::myns::loc(5)]


test record-0.1 {delete an instance} {
    record delete instance myns::loc(2)
} ""

test record-0.1 {delete a nested instance} {
    record delete instance myns::cont(2)
} ""

test record-0.1 {delete a record} {
    record delete record myns::location
} ""

test record-0.1 {test existence of an instance that was deleted} {
	record exists instance myns::loc(1)
} 0

test record-0.1 {show existence of an instance} {
	record exists instance myns::cont(1)
	
} 1

test record-0.1 {show non-existent instance} {
	record exists instance myns::junk
	
} 0

test record-0.1 {show existence of record} {
	record exists record myns::contact
	
} 1
