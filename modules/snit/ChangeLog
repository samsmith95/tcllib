2003-10-17  Will Duquette  <will@cordelia.local.>

	* snit.html: Added typeconstructor documentation.
	* faq.html:  

	* snit.tcl: Implemented typeconstructors.  A typeconstructor's
                    body is executed as part of the compiled type
	            definition; it has access to all of the typevariables
	            and typemethods.  Its job is to initialize arrays,
	            set option database values, and like that.
	
	* snit.test: Added tests for typeconstructors.

2003-10-16  Will Duquette  <will@wjduquette.com>

	* README.txt: Updated to reflect snit's presence in tcllib, and
	  to point to this ChangeLog file.

2003-09-30  Andreas Kupries  <andreask@activestate.com>

	* snit.tcl: A number of changes to the code generation part.
	  - Usage of [subst]'s was superfluous, removed, simple string
	    interpolation now.

	  - Now 'namespace eval type' enclosing the generated code
	    anymore. Such an eval is now done only at the top of the
	    generated code to define the namespace, and to
	    define/initialize the typevariables. All procedure definitions
	    are now outside of 'namespace eval' and use fully qualified
	    command names instead.

	  - Moved the code in [snit::Define] which instantiated the class
	    using the generated code into it own helper command,
	    [snit::DefineDo]. Overiding this command allows users of the
	    snit package perform other actions on the newly defined
	    class. One example is that of a snit-compiler which goes
	    through a file containing tcl code and replaces all snit::*
	    definitions with the generated code.

	  Motivation for the change: When applying procomp to procedure
	  definitions inside of a 'namespace eval' they are not
	  byte-compiled, but kept as encoded literal. This is a direct
	  consequence of 'namespace eval' not having a compile
	  function. It also means that introspection, i.e. [info body]
	  does recover the actual procedure definition. By using procedure
	  definitions outside of namespace eval, but fully qualified names
	  this limitation of procomp is avoided. The aforementioned snit
	  compiler application is another part for this, ensuring that
	  instead of keeping the whole class definition as one literal for
	  the snit::* call we actually have tcl code to compile and hide.

	* snit.tcl:     Updated the version number to 0.83
	* pkgIndex.tcl:
	* snit.man:
	* snitfaq.man:

2003-07-18  Andreas Kupries  <andreask@activestate.com>

	* snit.test: Fixed SF tcllib bug #772535. Instead of using a
	* snit.tcl:  variable reference in the callback a regular command
	             is called, with the unchanging 'selfns' as argument.
		     From there things go through the regular dispatching
		     mechanism after the actual instance name was obtained.
		     Updated all affected tests.

		     Updated dmethod-1.5 also, 'string' delivers a
		     different error message.

2003-07-16  Andreas Kupries  <andreask@activestate.com>

	* snit.man:    Added references to bug trackers, as part of
	* snitfaq.man: caveats. Also added note about bwidget/snit
	               interaction.

	* snit.tcl: Integrated latest (small) change to original code base
	  (was not released yet). Removes bad trial to fix up error stack.
	  We are now at version 0.82. Added note to developers explaining
	  the catch in Snit_tracer.

2003-07-15  Andreas Kupries  <andreask@activestate.com>

	* snit.tcl:    Imported new module into tcllib.
	* snit.test:   snit = Snit Is Not IncrTcl
	* snit.html:   Author: William Duquette
	* faq.html:    OO package + megawidget framework.
	* README.txt:
	* license.txt:
	* pkgIndex.tcl:
	* snit.man:
	* snitfaq.man:

