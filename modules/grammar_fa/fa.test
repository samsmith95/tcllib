# -*- tcl -*-
# fa.test:  tests for the grammar::fa container.
#
# Copyright (c) 2004 by Andreas Kupries <andreas_kupries@users.sourceforge.net>
#
# RCS: @(#) $Id: fa.test,v 1.6 2006/01/10 23:05:19 andreas_kupries Exp $

if {![package vsatisfies [package provide Tcl] 8.4]} {
    puts "Aborting tests for grammar::fa."
    puts "Requiring Tcl 8.4, have [package present Tcl]"
    return
}

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

# -------------------------------------------------------------------------
# Ensure we test _this_ local copy and not one installed somewhere else.
# We also ensure to use local copies of the prerquisite packages.

package forget grammar::fa  ; catch {namespace delete ::grammar::fa}
package forget snit         ; catch {namespace delete ::snit}
package forget struct::set  ; catch {namespace delete ::struct::set}
package forget struct::list ; catch {namespace delete ::struct::list}

if {[catch {source [file join [file dirname [file dirname [info script]]] struct list.tcl]} msg]} {
    puts "skipped [file tail [info script]] (list.tcl): $msg"
    return
}
if {[catch {source [file join [file dirname [file dirname [info script]]] struct sets.tcl]} msg]} {
    puts "skipped [file tail [info script]] (sets.tcl): $msg"
    return
}
if {[catch {source [file join [file dirname [file dirname [info script]]] snit snit.tcl]} msg]} {
    puts "skipped [file tail [info script]] (snit.tcl): $msg"
    return
}
if {[catch {source [file join [file dirname [info script]] fa.tcl]} msg]} {
    puts "skipped [file tail [info script]] (fa.tcl): $msg"
    puts $::errorInfo
    return
}
if {[catch {source [file join [file dirname [info script]] tests.support]} msg]} {
    puts "skipped [file tail [info script]] (tests.support): $msg"
    puts $::errorInfo
    return
}

package require grammar::fa
puts "- grammar::fa [package present grammar::fa]"
puts "  - struct::set  [package present struct::set]"
puts "  - struct::list [package present struct::list]"
puts "  - snit         [package present snit]"

set class ::grammar::fa

# -------------------------------------------------------------------------

foreach f [lsort [glob -nocomplain -dir [file join [file dirname [info script]] tests] fa_*.test]] {
    #puts   \ \ \ \ [file tail $f]\ \t[expr {double([lindex [time {source $f} 1] 0])/1000000}]\ seconds
    source $f
}

# -------------------------------------------------------------------------
::tcltest::cleanupTests
