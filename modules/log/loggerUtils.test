# -*- tcl -*-
# Tests for the utilities to the logger facility.
#
# Sourcing this file into Tcl runs the tests and generates output for errors.
# No output means no errors were found.
#
# Copyright (c) 2005 by Aamer Aahkter
#
# $Id: loggerUtils.test,v 1.2 2005/09/30 18:05:57 andreas_kupries Exp $

if {![package vsatisfies [package provide Tcl] 8.2]} {
    puts "    Aborting tests for logger::utils."
    puts "    Requiring Tcl 8.2, have [package present Tcl]"
    return
}

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2
    namespace import ::tcltest::*
} else {
    # Ensure that 2.2 or higher present.

    if {![package vsatisfies [package present tcltest] 2.2]} {
	puts "    Aborting tests for logger::utils."
	puts "    Requiring tcltest 2.2, have [package present tcltest]"
	return
    }
}

package forget logger::utils
package forget logger::appender
package forget logger

catch {namespace delete ::logger}

set moddir [file dirname [file dirname [file join [pwd] [info script]]]]

if {[catch {source [file join $moddir log logger.tcl]} msg]} {
    puts "skipped [file tail [info script]] (logger.tcl): $msg"
    return
}
if {[catch {source [file join $moddir log loggerAppender.tcl]} msg]} {
    puts "skipped [file tail [info script]] (loggerAppender.tcl): $msg"
    return
}
if {[catch {source [file join $moddir log loggerUtils.tcl]} msg]} {
    puts "skipped [file tail [info script]] (loggerUtils.tcl): $msg"
    return
}

package require logger::utils

puts "- logger::utils [package present logger::utils]"
puts "  - logger           [package present logger]"
puts "  - logger::appender [package present logger::appender]"


::tcltest::loadTestedCommands

logger::setlevel critical

namespace eval ::loggerExtension::test {

    ::tcltest::test load {} -setup {
    } -constraints {
    } -cleanup {
    } -body {
    } -returnCodes {
        ok
    } -result {}


    ::tcltest::test createFormatCmd-1 {
	check for %d
    } -setup {
    } -constraints {
    } -cleanup {
    } -body {
	set a [logger::utils::createFormatCmd %d]
	set b [subst $a]
	regexp {\d\d\d\d/\d\d/\d\d \d\d:\d\d:\d\d} $b
    } -result {1}

    ::tcltest::test createFormatCmd-2 {
	check for %P
    } -setup {
    } -constraints {
    } -cleanup {
    } -body {
	set a [logger::utils::createFormatCmd %P]
	set b [subst $a]
    } -returnCodes {
        ok
    } -result [pid]

    ::tcltest::test createFormatCmd-3 {
	check for %H
    } -setup {
    } -constraints {
    } -cleanup {
    } -body {
	set a [logger::utils::createFormatCmd %H]
	set b [subst $a]
    } -returnCodes {
        ok
    } -result [info hostname]

    ::tcltest::test createFormatCmd-4 {
	check for %c
    } -setup {
    } -constraints {
    } -cleanup {
    } -body {
	set a [logger::utils::createFormatCmd %c -category test::cat ] 
	set b [subst $a]
    } -returnCodes {
        ok
    } -result test::cat

    ::tcltest::test createFormatCmd-5 {
	check for %C
    } -setup {
    } -constraints {
    } -cleanup {
    } -body {
	set a [logger::utils::createFormatCmd %C -category test::cat ] 
	set b [subst $a]
    } -returnCodes {
        ok
    } -result test

    ::tcltest::test createFormatCmd-6 {
	check for %p
    } -setup {
    } -constraints {
    } -cleanup {
    } -body {
	set a [logger::utils::createFormatCmd %p -category test::cat -priority error] 
	set b [subst $a]
    } -returnCodes {
        ok
    } -result error


    ::tcltest::test createLogProc-1 {
	create a proc and test it
    } -setup {
    } -constraints {
    } -cleanup {
    } -body {
	set a [logger::utils::createLogProc \
		   -category catTest \
		   -priority critical \
		   -procName ::bobo \
		   -conversionPattern {\[%d\] \[%c\] \[%M\] \[%p\] %m}]
	eval $a
	::bobo test
    } -returnCodes {ls

	ok
    }  -match regexp \
	-output {\[[\d:\/ ]+\] \[catTest\] \[namespace\] \[critical\] test}

    ::tcltest::test applyAppender-1 {
	apply an appender 
    } -setup {
    } -constraints {
    } -cleanup {
	${log}::delete
	unset log
    } -body {
	set log [logger::init testLog]
	logger::utils::applyAppender -appender console -serviceCmd $log
	${log}::error "this is error"
    } -returnCodes {
        ok
    }  -match regexp \
	-output {\[[\d:\/ ]+\] \[testLog\] \[namespace\] \[error\] this is error}

    ::tcltest::test applyAppender-2 {
	apply an appender, to 2 loggers
    } -setup {
    } -constraints {
    } -cleanup {
	${log1}::delete
	${log2}::delete
	unset log1
	unset log2
    } -body {
	set log1 [logger::init testLog1]
	set log2 [logger::init testLog2]
	logger::utils::applyAppender -appender console -serviceCmd [list $log1 $log2]
	${log1}::error "this is error1"
	${log2}::error "this is error2"
    } -returnCodes {
        ok
    }  -match regexp \
	-output {\[[\d:\/ ]+\] \[testLog1\] \[namespace\] \[error\] this is error1\n\[[\d:\/ ]+\] \[testLog2\] \[namespace\] \[error\] this is error2}


    ::tcltest::test applyAppender-3 {
	auto apply
    } -setup {
    } -constraints {
    } -cleanup {
    } -body {
	logger::utils::applyAppender -appender console
	set log [logger::init applyAppender-3]
	${log}::error "this is error"
    } -returnCodes {
        ok
    } -match regexp \
	-output {\[[\d:\/ ]+\] \[applyAppender-3\] \[namespace\] \[error\] this is error}

    ::tcltest::test applyAppender-4 {
	auto apply
    } -setup {
    } -constraints {
    } -cleanup {
    } -body {
	logger::utils::applyAppender -appender colorConsole
	set log [logger::init applyAppender-4]
	${log}::error "this is error"
    } -returnCodes {
        ok
    } -match regexp \
	-output {\[[\d:\/ ]+\] \[applyAppender-4\] \[namespace\] \[error\] this is error}

}


::tcltest::cleanupTests

# ;;; Local Variables: ***
# ;;; mode: tcl ***
# ;;; End: ***
