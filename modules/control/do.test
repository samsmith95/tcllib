# Tests for [control::do]
#
# RCS: @(#) $Id: do.test,v 1.1 2001/11/07 10:40:01 rmax Exp $
#

package forget control
catch {namespace delete control}

# Direct loading of provide script -- support testing even
# when not installed.  And be sure we test the local copy
# and not some later version that may be installed.
source [file join [file dirname [info script]] control.tcl]
namespace import ::control::do

package require tcltest
namespace import -force tcltest::test ::tcltest::cleanupTests

# ----------------------------------------
test {do-1.0} {do ... while} {
    set x 0
    do {incr x} while {$x < 10}
    set x
} 10

# ----------------------------------------
test {do-1.1} {do ... until} {
    set x 0
    do {incr x} until {$x > 10}
    set x
} 11

# ----------------------------------------
test {do-1.2} {break} {
    set x 0
    do {
	incr x
	if {$x == 5} {break}
    } until {$x == 10}
    set x
} 5

# ----------------------------------------
test {do-1.3} {continue} {
    set x 0
    set xx [list]
    do {
	incr x
	if {$x == 5} {continue}
	lappend xx $x
    } until {$x == 10}
    set xx
} {1 2 3 4 6 7 8 9 10}

# ----------------------------------------
test {do-1.4} {error} {
    catch {
	set x 0
	do {
	    incr x
	    if {$x == 5} {foo}
	} while {$x < 10}
    } result
    list $x $result
} {5 {invalid command name "foo"}}

# ----------------------------------------
test {do-1.5} {return} {
    proc foo {} {
	set x 0
	do {
	    incr x
	    if {$x == 5} { return $x }
	} while {$x < 10}
    }
    set result [foo]
    rename foo ""
    set result
} 5

# ----------------------------------------
test {do-1.6} {break in the first loop} {
    set x 0
    do {
	break
	incr x
    } while {$x < 10}
    set x
} 0

# ----------------------------------------
test {do-1.7} {continue in the first loop} {
    set x 0
    set xx [list]
    do {
	incr x
	if {$x == 1} {continue}
	lappend xx $x
    } until {$x == 10}
    set xx
} {2 3 4 5 6 7 8 9 10}

# ----------------------------------------
test {do-1.8} {error in the first loop} {
    set x 0
    catch {
	do {
	    foo
	    incr x
	} until {$x == 10}
    } result
    list $x $result
} {0 {invalid command name "foo"}}

# ----------------------------------------
test {do-1.9} {[do ... while] with false condition} {
    set x 0
    do {
	incr x
    } while 0
    set x
} 1

# ----------------------------------------
test do-1.10 {[do ... until] with true condition} {
    set x 0
    do {
	incr x
    } until 1
    set x
} 1

# ----------------------------------------
test do-1.11 {third arg is neither while nor until} {
    set x 0
    catch {
	do {
	    incr x
	} foo 1
	set x
    } result
    list $x $result
} {0 {bad option "foo": must be until, or while}}

cleanupTests

# a proc that wastes some time
proc something {n} {
    for {set i 0} {$i < $n} {incr i} {}
}

proc main {} {
    # run it for the first time to get it byte compiled
    something 1

    set payload {
	something 10
	incr x
    }
    puts "\nComparing performance of do-while, do-until and builtin while..."
    set format "%-8s : %20s for %4d iteration(s)."
    foreach c {1 10 5000} {
	puts ""
	foreach {descr script} {
	    {do while} {do $payload while {$x < $c}}
	    {do until} {do $payload until {$x == $c}}
	    {while} {while {$x < $c} $payload}
	} {
	    set x 0
	    puts [format $format $descr [lrange [time $script 1] 0 1] $x]
	}
    }
}
main

