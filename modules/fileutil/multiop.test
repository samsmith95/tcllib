# -*- tcl -*-
# Tests for the multi-op system.
#
# Sourcing this file into Tcl runs the tests and generates output for errors.
# No output means no errors were found.
#
# Copyright (c) 2007 by Andreas Kupries <andreas_kupries@users.sourceforge.net>
# All rights reserved.
#
# RCS: @(#) $Id: multiop.test,v 1.5 2007/08/13 22:32:25 andreas_kupries Exp $

# -------------------------------------------------------------------------

source [file join \
	[file dirname [file dirname [file join [pwd] [info script]]]] \
	devtools testutilities.tcl]

testsNeedTcl     8.4
testsNeedTcltest 2.1

support {
    use       snit/snit.tcl   snit
    use       struct/list.tcl struct::list

    # Note: Order is important for the next two. First ::fileutil is
    # wiped out, and through this all previously created multi::op
    # objects, like from the 'multi.test'. This also kills the
    # embedded wip objects, and wiping out ::wip after is ok.

    # However, if we were to wipe out ::wip before ::fileutil kills
    # the wip objects, and leaves the multi::op objects with dangling
    # references. Wiping them then out then causes snit to write error
    # messages to stdout (RT.InstanceTrace) due to the already deleted
    # namespaces for the wip objects.

    useLocal  fileutil.tcl    fileutil
    use       wip/wip.tcl     wip
}
testing {
    useLocal  multiop.tcl     fileutil::multi::op
}

# -------------------------------------------------------------------------
# Now the package specific tests....

proc setup {} {
    makeDirectory origin
    makeFile   {} origin/anneliese
    makeFile   {} origin/bertram
    makeFile   {} origin/connie
    makeFile   {} origin/detlev
    makeDirectory origin/egon
    makeFile   {} origin/egon/suse
    makeFile   {} origin/egon/bettina
    makeDirectory destination
    return
}

proc cleanup {} {
    removeDirectory origin
    removeDirectory destination
    return
}

proc scan {d} {
    set base [tempPath $d]
    return [lsort -dict \
		[struct::list map [fileutil::find $base] \
		     [list fileutil::stripPath $base]]]
}

proc cleanup_all {} {
    rename setup       {}
    rename cleanup     {}
    rename scan        {}
    rename cleanup_all {}
    unset ::src ::dst
    return
}

set src [tempPath origin]
set dst [tempPath destination]

# -------------------------------------------------------------------------

test multiop-1.0 {fileutil multi operations, copying} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do copy the *e* from $src to $dst except for *n*
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
    X destroy
} -result {{anneliese bertram connie detlev egon egon/bettina egon/suse} {bertram detlev}}

test multiop-1.1 {fileutil multi operations, moving} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do move the *e* from $src into $dst except for *n*
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
    X destroy
} -result {{anneliese connie egon egon/bettina egon/suse} {bertram detlev}}

test multiop-1.1 {fileutil multi operations, deletion} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do copy the *e* from $src into $dst except for *n*
    X do remove the *a* in $dst
    scan destination
} -cleanup {
    cleanup
    X destroy
} -result {detlev}

test multiop-1.2 {fileutil multi operations, recursive copying} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do recursively copy the * from $src to $dst
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
    X destroy
} -result {{anneliese bertram connie detlev egon egon/bettina egon/suse} {anneliese bertram connie detlev egon egon/bettina egon/suse}}

test multiop-1.3 {fileutil multi operations, recursive move} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do recursively move the * files from $src to $dst
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
    X destroy
} -result {egon {anneliese bertram connie detlev egon egon/bettina egon/suse}}

test multiop-1.4 {fileutil multi operations, expand and save} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do expand the *a* in $src -> v
    set v
} -cleanup {
    cleanup ; unset v
    X destroy
} -result {anneliese bertram}

test multiop-1.5 {fileutil multi operations, expand and save} -setup {
    setup
    fileutil::multi::op X
} -body {
    set v {bertram egon}
    X do copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
    X destroy
} -result {bertram egon egon/bettina egon/suse}

# -------------------------------------------------------------------------

test multiop-2.0 {fileutil multi operations, platform conditionals, not matching, win on unix} -setup {
    setup
    fileutil::multi::op X
} -constraints unix -body {
    set v {bertram egon}
    X do for-win copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
    X destroy
} -result {}

test multiop-2.1 {fileutil multi operations, platform conditionals, not matching, unix on win} -setup {
    setup
    fileutil::multi::op X
} -constraints win -body {
    set v {bertram egon}
    X do for-unix copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
    X destroy
} -result {}

test multiop-2.2 {fileutil multi operations, platform conditionals, matching, unix} -setup {
    setup
    fileutil::multi::op X
} -constraints unix -body {
    set v {bertram}
    X do for-unix copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
    X destroy
} -result {bertram}

test multiop-2.3 {fileutil multi operations, platform conditionals, matching, windows} -setup {
    setup
    fileutil::multi::op X
} -constraints win -body {
    set v {bertram}
    X do for-win copy the-set v from $src to $dst
    scan destination
} -cleanup {
    cleanup ; unset v
    X destroy
} -result {bertram}

# -------------------------------------------------------------------------

proc rec {args} {
    global  res
    lappend res $args
    return
}

test multiop-3.0 {fileutil multi operations, invoke user operation} -setup {
    setup
    fileutil::multi::op X
} -constraints unix -body {
    set v {bertram egon}
    set res {}
    X do invoke rec the-set v from $src to $dst as X
    set res
} -cleanup {
    cleanup ; unset v res
    X destroy
} -result [list [list $src $dst {bertram X egon egon}]]

# -------------------------------------------------------------------------

test multiop-4.0 {fileutil multi operations, moving, files} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do move the * files from $src into $dst
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
    X destroy
} -result {{egon egon/bettina egon/suse} {anneliese bertram connie detlev}}

test multiop-4.1 {fileutil multi operations, moving, directories} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do move the * directories from $src into $dst
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
    X destroy
} -result {{anneliese bertram connie detlev} {egon egon/bettina egon/suse}}

test multiop-4.2 {fileutil multi operations, moving, links} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do move the * links from $src into $dst
    list [scan origin] [scan destination]
} -cleanup {
    cleanup
    X destroy
} -result {{anneliese bertram connie detlev egon egon/bettina egon/suse} {}}

# -------------------------------------------------------------------------

test multiop-5.0 {fileutil multi operations, strict destination} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do strict into ${dst}x
} -cleanup {
    cleanup
    X destroy
} -returnCodes error -result "Destination directory \"${dst}x\": Does not exist"

test multiop-5.1 {fileutil multi operations, non-strict destination} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do !strict into ${dst}x
} -cleanup {
    cleanup
    X destroy
} -result {}

test multiop-5.2 {fileutil multi operations, strict expansion} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do strict expand the A* in $src
} -cleanup {
    cleanup
    X destroy
} -returnCodes error -result "No files matching pattern \"A*\" in directory \"$src\""

test multiop-5.3 {fileutil multi operations, non-strict expansion} -setup {
    setup
    fileutil::multi::op X
} -body {
    X do !strict expand the A* in $src
} -cleanup {
    cleanup
    X destroy
} -result {}

# -------------------------------------------------------------------------
cleanup_all
testsuiteCleanup
return
