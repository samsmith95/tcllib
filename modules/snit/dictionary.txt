Last updated: Snit V0.94 of 5/29/2004.

TYPE VARIABLES

Snit_info               Introspection Array.  Keys and values are as
                        follows:
    
    counter		Integer counter.  Used to generate unique names.
    exceptopts          Option names excluded from delegate option *.
    options		Names of local options.
    widgetclass         Tk widget class name for snit::widgets
    hulltype            Hull widget type (frame or toplevel) for
                        snit::widgets.
    ns			The type namespace, "$type::". UNUSED.
    exceptmethods       Method names excluded from delegate method *.
    excepttypemethods   Typemethod names excluded from delegate typemethod *.
    tvardecs            Type variable declarations--for dynamic
                        methods.
    ivardecs            Instance variable declarations--for dynamic
                        methods.

Snit_isWidget           Boolean; true if the object is a widget or 
                        widgetadaptor. 
                        
                        * Could live in Snit_info.
                        * Can this be resolved at compile time?

Snit_isWidgetAdaptor    Boolean; true if the object is a
                        widgetadaptor.

                        * Could live in Snit_info.
                        * Can this be resolved at compile time?

Snit_optiondefaults     Array(local option name) = default value
                        Used to determine whether option is local.
                        Used in "configure" introspection.
                        Used to initialize options.

                        * If an option command cache were implemented,
                          this could become a dict in Snit_info.

Snit_delegatedoptions   Array(delegated option name) = 
                            [list component targetOptionName]
                        Index * has info for delegate option *.
                        Used to determine whether option is delegated.
                        Used in option introspection and component 
                        installation.

                        * If an option command cache were implemented,
                          this info could go in Snit_info.
                        * The delegated option design is likely to
                          to be generalized anyway.

Snit_compoptions        Array(component name) = List of option names
                        delegated to the component. 
                        Used during component installation, and at no
                        other time.

                        * Move to Snit_info?

Snit_optiondbspec       Array(local option name) = 
                            [list resourceName className]
                        Used in "configure" introspection.
                        Used in widget creation.

Snit_typemethodInfo     Array(method name) = {<pattern> <compName>}
                        where <compName> is "" for normal typemethods
                        and "method name" can be "*".  Used in
                        typemethod cache lookup to create the command
                        for the named typemethod.

Snit_typecomponents     Array(typecomponent name) = command_name
                        Used whenever we need to retrieve the 
                        typecomponent's command.

Snit_typeMethodCache    Array(typemethod name) = cached command
                        Used in typemethod dispatch.

Snit_methodInfo         Array(method name) = {<pattern> <compName>}
                        where <compName> is "" for normal methods and
                        "method name" can be "*".  Used in 
                        method cache lookup to create the command for
                        the named method.
    
INSTANCE VARIABLES

Snit_instance           Current name of the instance command.

Snit_components         Array(component name) = command_name
                        Used whenever we need to retrieve the
                        component's command.

Snit_methodCache        Array(method name) = cached command
                        Used during method dispatch.
