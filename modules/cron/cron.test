# Tests for the cron module
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 2016 by Sean Woods
# (Insert BSDish style "use at your own risk" license text)

source [file join \
    [file dirname [file dirname [file join [pwd] [info script]]]] \
    devtools testutilities.tcl]

package require tcltest
testsNeedTcl     8.6
testsNeedTcltest 1.0

support {
    use dicttool/dicttool.tcl   dicttool
}
testing {
    useLocal cron.tcl cron
}
set ::cron::trace 0
# Sleep until the top of the second
::cron::sleep [expr {1000-[clock milliseconds]%1000}]

set timecounter 0
::cron::every timecounter 1 {incr timecounter}
set now [clock seconds]

# Test at
set timerevent 0
::cron::at timeevent1 [expr {$now + 5}] {set ::timerevent 1}
::cron::at timeevent2 [expr {$now + 6}] {set ::eventpause 0}
::cron::at timeevent3 [expr {$now + 10}] {set ::timerevent 2}
::cron::at timeevent4 [expr {$now + 11}] {set ::pause 0}

test cron-1.1 {cron::every} {
  set ::timecounter
} 0
test cron-1.2 {cron::at1} {
  set ::timerevent
} 0
vwait eventpause
test cron-1.3 {cron::at1} {
  set ::timerevent
} 1

# Test that in X seconds our timer
# was incremented X times
vwait pause  
test cron-1.4 {cron::every} {
  set ::timecounter
} [expr {[clock seconds]-$now}]

test cron-1.5 {cron::at2} {
  set ::timerevent
} 2

###
# Confirm cancel works
::cron::cancel timecounter
set timecounterfinal $::timecounter

::cron::sleep 2000
test cron-1.6 {cron::cancel} {
  set ::timecounter
} $::timecounterfinal

###
# Test the new IN command
###
set ::inevent 0
cron::in 5 {set ::inevent 1}

test cron-1.7 {cron::in} {
  set ::inevent
} 0

::cron::sleep 6000

test cron-1.8 {cron::in} {
  set ::inevent
} 1

proc my_coro {} {
  set ::my_coro_progress 0
  set ::my_coro_start [clock milliseconds]
  ::cron::sleep 1250
  set ::my_coro_end [clock milliseconds]
  set ::my_coro_progress 1
}
coroutine TESTCORO my_coro
::cron::coroutine_register {} TESTCORO
test cron-1.9 {cron::coroutine_register} {
  set ::my_coro_progress
} 0

::cron::sleep 2000

test cron-1.10 {cron::coroutine_register} {
  set ::my_coro_progress
} 1

puts "DELAY [expr {$::my_coro_end - $::my_coro_start}]"
test cron-1.11 {cron::coroutine_register} {
  expr {($::my_coro_end - $::my_coro_start) >= 1250}
} 1

::cron::in 5 {
  set ::cron::forever 0
test cron-1.12 {cron::main} {
  set ::cron::forever
} 0
}
::cron::wake TEST
::cron::main

# If we get to this test, mission successful
test cron-1.13 {cron::main} {
  return 1
} 1
testsuiteCleanup
return
