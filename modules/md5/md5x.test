# -*- tcl -*-
# md5.test:  tests for the md5 commands
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 2001 by ActiveState Tool Corp.
# All rights reserved.
#
# RCS: @(#) $Id: md5x.test,v 1.8 2005/02/17 14:29:30 patthoyts Exp $

# -------------------------------------------------------------------------
# Initialize the test package
#
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

# -------------------------------------------------------------------------
# Ensure we test _this_ local copy and one installed somewhere else.
#
package forget md5
catch {namespace delete ::md5}
if {[catch {source [file join [file dirname [info script]] md5x.tcl]} msg]} {
    puts "skipped [file tail [info script]]: $msg"
    return
}

# -------------------------------------------------------------------------
# Setup any constraints
#

# -------------------------------------------------------------------------
# Now the package specific tests....
# -------------------------------------------------------------------------

if {$::md5::usemd5c} {
    puts "- md5 [package present md5] (critcl based)"
} elseif {$::md5::usetrf} {
    puts "- md5 [package present md5] (Trf based)"
} else {
    puts "- md5 [package present md5] (pure Tcl)"
}

# -------------------------------------------------------------------------

test md5-1.0 {md5} {
    catch {::md5::md5} result
    set result
} {wrong # args: should be "md5 ?-hex? -filename file | string"}
# [tcltest::wrongNumArgs "md5" "?-hex? -filename file | string" 0]

test md5-1.1 {md5} {
    catch {::md5::hmac} result
    set result
} {wrong # args: should be "hmac ?-hex? -key key -filename file | string"}
# [tcltest::wrongNumArgs "hmac" "?-hex? -key key -filename file | string" 0]

test md5-1.2 {md5} {
    catch {::md5::hmac key} result
    set result
} {wrong # args: should be "hmac ?-hex? -key key -filename file | string"}
# [tcltest::wrongNumArgs "hmac" "?-hex? -key key -filename file | string" 1]


set tests {
    1    ""
    "D41D8CD98F00B204E9800998ECF8427E"
    2    "a"
    "0CC175B9C0F1B6A831C399E269772661"
    3    "abc"
    "900150983CD24FB0D6963F7D28E17F72"
    4    "message digest"
    "F96B697D7CB7938D525A2F31AAF161D0"
    5    "abcdefghijklmnopqrstuvwxyz"
    "C3FCD3D76192E4007DFB496CCA67E13B"
    6    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    "D174AB98D277D9F5A5611C2C9F419D9F"
    7    "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
    "57EDF4A22BE3C955AC49DA2E2107B67A"
}
foreach {n msg expected} $tests {
    test md5-2.$n {md5} {
	list [catch {::md5::md5 -hex -- $msg} msg] $msg
    } [list 0 $expected]
}
#
# If we are using a compiled helper - check the pureTcl version too.
#
if {$::md5::usetrf || $::md5::usemd5c || 1} {
    set usetrf $::md5::usetrf
    set usemd5c $::md5::usemd5c
    set ::md5::usetrf 0
    set ::md5::usemd5c 0
    foreach {n msg expected} $tests {
        test md5-tcl-2.$n {md5 pureTcl implementation} {
            list [catch {::md5::md5 -hex $msg} msg] $msg
        } [list 0 $expected]
    }
    set ::md5::usetrf $usetrf
    set ::md5::usemd5c $usemd5c
}

set vectors {
    1 ""     ""      "74E6F7298A9C2D168935F58C001BAD88"
    2 "\x01" ""      "DFA55EFBE6ED07FA2E056E57E949930A"
    3 "foo"  "hello" "EF2AC8901530DB30AA56929ADFE5E13B"
    4 "bar"  "world" "DFC05594B019ED51535922A1295446E8"
    5 "key"  "text"  "D0CA6177C61C975FD2F8C07D8C6528C6"
    6 "md5"  "hmac"  "D189F362DAF86A5C8E14BA4ABA91B260"
    7 "hmac" "md5"   "480343CF0F2D5931EC4923E81059FB84"
    8 "md5"  "md5"   "92C5FB986E345F21F181047AB939EC77"
    9 "hmac" "hmac"  "08ABBE58A55219789E3EEDE153808A56"
   10 "01234567abcdefgh01234567abcdefgh01234567abcdefgh01234567abcdefgh==" "hello world"
    "CF0237466F9B3C773858A1892B474C9E"
   11 "-"    "a"     "E3BA60E98ED812A68AEB04A8FF57AC8E"
   12 "a"    "-"     "A9DD01C469578DCD4220600667DF6FFB"
} 

foreach {n key text expected} $vectors {
    test md5-3.$n {hmac} {
	list [catch {::md5::hmac -hex -key $key -- $text} msg] $msg
    } [list 0 $expected]
}

if {$::md5::usetrf || $::md5::usemd5c || 1} {
    set usetrf $::md5::usetrf
    set usemd5c $::md5::usemd5c
    set ::md5::usetrf 0
    set ::md5::usemd5c 0
    foreach {n key text expected} $vectors {
        test md5-tcl-4.$n {md5 pureTcl implementation} {
            list [catch {::md5::hmac -hex -key $key -- $text} msg] $msg
        } [list 0 $expected]
    }
    set ::md5::usetrf $usetrf
    set ::md5::usemd5c $usemd5c
}

test md5-5.1 {Check hashing data that begins with hyphen} {
    list [catch {::md5::md5 -hex -hello} msg] $msg
} {0 110CD19610AD6247F30263C882670CC1}

test md5-5.2 {Check hashing data that begins with hyphen} {
    list [catch {::md5::md5 -hex -- -hello} msg] $msg
} {0 110CD19610AD6247F30263C882670CC1}

test md5-5.3 {Check hashing data that begins with hyphen} {
    list [catch {::md5::md5 -hex --} msg] $msg
} {0 CFAB1BA8C67C7C838DB98D666F02A132}

test md5-5.4 {Check hashing data that begins with hyphen} {
    list [catch {::md5::md5 -hex -- --} msg] $msg
} {0 CFAB1BA8C67C7C838DB98D666F02A132}

test md5-6.1 {Check hmac data that begins with hyphen} {
    list [catch {::md5::hmac -hex -key "" -hello} msg] $msg
} {0 6C39C49DA482D110B72B72F24E082E0F}

test md5-6.2 {Check hmac data that begins with hyphen} {
    list [catch {::md5::hmac -hex -key "" -- -hello} msg] $msg
} {0 6C39C49DA482D110B72B72F24E082E0F}

test md5-6.3 {Check hmac data that begins with hyphen} {
    list [catch {::md5::hmac -hex -key "" --} msg] $msg
} {0 8EB61D377088779210AD82659AECD631}

test md5-6.4 {Check hmac data that begins with hyphen} {
    list [catch {::md5::hmac -hex -key "" -- --} msg] $msg
} {0 8EB61D377088779210AD82659AECD631}

# -------------------------------------------------------------------------

::tcltest::cleanupTests

# -------------------------------------------------------------------------
# Local Variables:
#   mode: tcl
#   indent-tabs-mode: nil
# End:
